{"version":3,"file":"index.js","sourceRoot":"","sources":["../../namumark/index.ts"],"names":[],"mappings":"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","sourcesContent":["import seekEOL from \"./seekEOL\";\r\n\r\nexport class NamuMark {\r\n    wikiText: string;\r\n    htmlArray: HTMLTag[];\r\n    constructor(wikiText: string, options=undefined) {\r\n        this.wikiText = wikiText;\r\n        this.htmlArray = [];\r\n    }\r\n\r\n    parse() {\r\n        if (this.wikiText.startsWith(\"#redirect\")) {\r\n            this.htmlArray.push(new HTMLTag(tagEnum.plain_text, this.wikiText));\r\n        } else {\r\n            for (let pos=0; pos < this.wikiText.length; pos++) {\r\n                const now = this.wikiText[pos]\r\n                if (now == \" \") {\r\n                    this.listProcessor(this.wikiText, pos, v => pos = v)\r\n                }\r\n                if (this.wikiText.substring(pos, pos + 1) == \"\\n\") {\r\n                    pos++;\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.arrayToHtmlString();\r\n\r\n    }\r\n\r\n    listProcessor(wikiText: string, pos: number, setPos: (v: number)=>number) {\r\n        let listArray: HTMLTag[] = [];\r\n        let fullArray: HTMLTag[] = [];\r\n        let position = pos;\r\n        // EOL 뒤에 텍스트가 있는지 여부\r\n        let loop = true;\r\n        let eol = seekEOL(wikiText, position)\r\n        let text = wikiText.substring(position, eol);\r\n        let indent = 1;\r\n        const indentRegex = /^(\\s+)\\*|1\\.|A\\.|a\\.|I\\.|i\\./;\r\n        while (loop) {\r\n            if (!indentRegex.test(text)) {\r\n                loop = false;\r\n            }\r\n            for (const match of text.matchAll(indentRegex)) {\r\n                indent = match[1].length\r\n            }\r\n            listArray.push(this.listParser(wikiText, indent))\r\n            if (eol < wikiText.substring(pos).length) {\r\n                position = eol + 2;\r\n                eol = seekEOL(wikiText, position)\r\n                text = wikiText.substring(position, eol);\r\n            }\r\n        }\r\n\r\n        for (const [index, element] of listArray.entries()) {\r\n            const indent = element.property.indent\r\n            if (indent == 1) {\r\n                fullArray.push(element)\r\n            } else {\r\n\r\n            }\r\n        }\r\n        setPos(position);\r\n    }\r\n\r\n    listParser(text: string, indent: number) {\r\n        let listArray: HTMLTag;\r\n        let matchedRegex = /^(\\*|1\\.|A\\.|a\\.|I\\.|i\\.)([^\\n]+)/g\r\n        let listPrefix = \"\";\r\n        let listContent = \"\";\r\n        for (const match of text.substring(1).matchAll(matchedRegex)) {\r\n            console.log(match);\r\n            listPrefix = match[1];\r\n            listContent = match[2].trim();\r\n            break;\r\n        }\r\n\r\n        listArray = new HTMLTag(tagEnum.text, {indent}, listContent)\r\n        \r\n        return listArray;\r\n    }\r\n\r\n    arrayToHtmlString() {\r\n        const documentStructure = [\"<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\\"UTF-8\\\">\\n<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n<title>Document</title>\\n<link rel=\\\"stylesheet\\\" href=\\\"viewStyle.css\\\">\\n</head>\\n<body>\", \"</body>\\n</html>\"]\r\n        let htmlString = \"\";\r\n        for (const tag of this.htmlArray) {\r\n            console.log(tag);\r\n            htmlString += tag.toString();\r\n        }\r\n        console.log(htmlString)\r\n        return documentStructure[0] + htmlString + documentStructure[1]\r\n    }\r\n}\r\n\r\nenum tagEnum {\r\n    text,\r\n    plain_text,\r\n    unordered_list,\r\n    list\r\n}\r\n\r\nclass HTMLTag {\r\n    tag: string;\r\n    content: string;\r\n    property: {[k: string]: any};\r\n    children: HTMLTag[];\r\n\r\n    constructor(tag: tagEnum, property: {} = {}, content: string = \"\") {\r\n        this.tag = this.caseAssertion(tag);\r\n        this.content = content;\r\n        this.property = property;\r\n    }\r\n\r\n    caseAssertion(tag: tagEnum) {\r\n        switch (tag) {\r\n            case tagEnum.text:\r\n                return \"\";\r\n            case tagEnum.plain_text:\r\n                return \"<div>\";\r\n            case tagEnum.unordered_list:\r\n                return \"<ul>\";\r\n            case tagEnum.list:\r\n                return \"<li>\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        let childrenToString: string = \"\"\r\n        if (this.children.length != 0)\r\n            childrenToString = this.children.map(v => v.toString()).reduce((prev, cur) => prev + cur);\r\n        \r\n        return this.tag + this.content + childrenToString + this.tag\r\n    }\r\n\r\n    addChildren(children: HTMLTag) {\r\n        this.children.push(children)\r\n        return children;\r\n    }\r\n}"]}